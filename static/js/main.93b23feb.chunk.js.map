{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","onClick","toggleMode","htmlFor","TextForm","useState","text","setText","style","color","heading","value","backgroundColor","rows","onChange","event","target","placeholder","disabled","length","newText","toUpperCase","showAlert","toLowerCase","navigator","clipboard","writeText","split","join","filter","element","defaultProps","aboutText","Alert","height","alert","role","msg","App","setMode","setAlert","message","setTimeout","document","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.93b23feb.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from 'prop-types'\r\n\r\n\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n      <div className=\"container-fluid\">\r\n        <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n        <button\r\n          className=\"navbar-toggler\"\r\n          type=\"button\"\r\n          data-bs-toggle=\"collapse\"\r\n          data-bs-target=\"#navbarSupportedContent\"\r\n          aria-controls=\"navbarSupportedContent\"\r\n          aria-expanded=\"false\"\r\n          aria-label=\"Toggle navigation\"\r\n        >\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            <li className=\"nav-item\">\r\n              {/* <Link className=\"nav-link\" aria-current=\"page\" to=\"/\">Home</Link> */}\r\n              <a className=\"nav-link\" aria-current=\"page\" href=\"#\">Home</a>\r\n            </li>\r\n            {/* <li className=\"nav-item\">\r\n              <Link className=\"nav-link\" to=\"/about\">\r\n                {props.aboutText}\r\n              </Link>\r\n            </li> */}\r\n          </ul>\r\n          <div className={`form-check form-switch text-${props.mode === 'light' ? 'dark' : 'light'}`}>\r\n            <input className=\"form-check-input\" type=\"checkbox\" id=\"flexSwitchCheckDefault\" onClick={props.toggleMode} />\r\n            <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable Dark Mode</label>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\n\r\nNavbar.propTypes = {\r\n  title: PropTypes.string.isRequired,  //isRequired likha hai to title props bejna jaroori h nhi to error milega agar default props set nhi h to\r\n  aboutText: PropTypes.string\r\n}\r\n\r\nNavbar.defaultProps = {\r\n  title: 'Set title here',\r\n  aboutText: \"set about here\"\r\n};","import React, {useState} from 'react'\r\n\r\n\r\nexport default function TextForm(props) {\r\n\r\n\r\n\r\n    const handleUpClick = () => {\r\n        // console.log('uppercase was clicked' + text);\r\n        let newText = text.toUpperCase();\r\n        setText(newText);\r\n        props.showAlert(\"Convert to Uppercase\",\"success\")\r\n    }\r\n    const handleLowClick = () => {\r\n        // console.log('uppercase was clicked' + text);\r\n        let newText = text.toLowerCase();\r\n        setText(newText);\r\n        props.showAlert(\"Convert to Lowercase\",\"success\")\r\n    }\r\n    const handleCopy = () => {  \r\n        navigator.clipboard.writeText(text);\r\n        props.showAlert(\"Copy to Clipboard\",\"info\")\r\n    }\r\n\r\n    const handleExtraSpaces = () => {\r\n        let newText = text.split(/[ ]+/);\r\n        setText(newText.join(\" \"));\r\n        props.showAlert(\"Remove Extra Spaces\",\"success\")\r\n    }\r\n\r\n    const handleClrClick = () => {\r\n        // console.log('uppercase was clicked' + text);\r\n        let newText = \"\";\r\n        setText(newText);\r\n    }\r\n\r\n    const handleOnChange = (event) => {\r\n        // console.log(\"onchange\");\r\n        setText(event.target.value);\r\n    }\r\n    const [text, setText] = useState(\"\");\r\n    // text = \"this is new text\"; //this is wrong way to change a text\r\n    // setText = (\"This is new text of mine\");\r\n    return (\r\n        <>\r\n        <div className=\"container my-3\" style={{color: props.mode === 'dark'?'white':'black'}}>\r\n            <h1 className=\"mb-4\">{props.heading}</h1>\r\n            <div className=\"mb-3\">\r\n                <textarea className=\"form-control\" value={text} id=\"myBox\" style={{backgroundColor: props.mode === 'dark'?'#1a3a53':'white', color: props.mode === 'dark'?'white':'black'}} rows=\"8\" onChange={handleOnChange} placeholder=\"Enter Text Here\"></textarea>\r\n            </div>\r\n            <button disabled={text.length===0} className=\"btn btn-primary mx-1 my-1\" style={{backgroundColor: props.mode === 'dark'?'#00508f':'#0d6efd'}} onClick={handleUpClick}>Convert to Uppercase</button>\r\n            <button disabled={text.length===0} className=\"btn btn-primary mx-1 my-1\" style={{backgroundColor: props.mode === 'dark'?'#00508f':'#0d6efd'}} onClick={handleLowClick}>Convert to Lowercase</button>\r\n            <button disabled={text.length===0} className=\"btn btn-primary mx-1 my-1\" style={{backgroundColor: props.mode === 'dark'?'#00508f':'#0d6efd'}} onClick={handleCopy}>Copy Text</button>\r\n            <button disabled={text.length===0} className=\"btn btn-primary mx-1 my-1\" style={{backgroundColor: props.mode === 'dark'?'#00508f':'#0d6efd'}} onClick={handleExtraSpaces}>Remove Extra Spaces</button>\r\n            <button disabled={text.length===0} className=\"btn btn-primary mx-1 my-1\" style={{backgroundColor: props.mode === 'dark'?'#00508f':'#0d6efd'}} onClick={handleClrClick}>Clear All</button>\r\n\r\n        </div>\r\n        <div className=\"container\" style={{color: props.mode === 'dark'?'white':'black'}}>\r\n            <h1>Your Text Summary</h1>\r\n            <p><b>{text.split(/\\s+/).filter((element)=>{return element.length!==0}).length} WORDS - {text.length} CHARACTERS</b></p>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n    // const capitalize = (word) => {\r\n    //     const lower = word.toLowerCase();\r\n    //     return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    // }\r\n    return (\r\n        <div style={{ height: '50px' }}>\r\n            {props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n                <strong>{props.alert.msg}</strong>\r\n            </div>}\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default Alert\r\n\r\n","import './App.css';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\n// import About from './components/About';\nimport React, { useState } from 'react';\nimport Alert from \"./components/Alert\";\n// import {\n//   BrowserRouter as Router,\n//   Switch,\n//   Route\n// } from \"react-router-dom\";\n\n\nfunction App() {\n  const [mode, setMode] = useState('light');\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type\n    })\n    setTimeout(() => {\n      setAlert(null)\n    }, 1500);\n  }\n\n  const toggleMode = () => {\n    if (mode === 'light') {\n      setMode('dark');\n      document.body.style.backgroundColor = \"#042743\";\n      showAlert(\"Dark Mode Enabled\", \"success\");\n      // document.title = \"TextUtils - Dark Mode\";\n    }\n    else {\n      setMode('light');\n      document.body.style.backgroundColor = \"#ddecea\";\n      showAlert(\"Light Mode Enabled\", \"success\");\n      // document.title = \"TextUtils\";\n    }\n  }\n\n  return (\n    <>\n      {/* <Router> */}\n      <Navbar title=\"TextUtils\" aboutText=\"About TextUtils\" mode={mode} toggleMode={toggleMode} />\n\n      <Alert alert={alert} />\n\n      {/* <Switch>\n          <Route exact path=\"/about\">\n            <About mode={mode} />\n          </Route> */}\n      {/* <Route exact path=\"/\"> */}\n      <TextForm heading=\"Try TextUtils - word counter, character counter, remove extra spaces\" mode={mode} showAlert={showAlert} />\n      {/* </Route> */}\n      {/* </Switch> */}\n      {/* </Router> */}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}